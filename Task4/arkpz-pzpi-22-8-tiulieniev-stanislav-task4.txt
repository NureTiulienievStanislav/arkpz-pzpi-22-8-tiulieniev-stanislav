Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 4
Тема роботи: «РОЗРОБКА IoT КЛІЄНТА 
(БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)»
з дисципліни «Аналіз та рефакторинг коду»






Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 




Харків 2024
 
Мета роботи: На лабораторній роботі №4 потрібно розробити програмне забезпечення для  IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System).
Хід роботи: 
Проект полягав у розробці програмного забезпечення для ІоТ клієнта, який збирає дані з датчиків і передає їх через MQTT на сервер. Спочатку була створена архітектура та UML діаграми для візуалізації процесів і взаємодії з системою. Потім розроблена бізнес-логіка для обробки даних, програмна реалізація функцій налаштування та обробки отриманих даних. Завершальним етапом було тестування ІоТ клієнта для перевірки його коректної роботи.
1.	Текстовий опис інженерних рішень
Інженерні рішення в проекті полягали в розробці системи, яка здатна збирати дані з датчиків (дистанція спереду та ззаду) і передавати їх на сервер через MQTT. Для цього була обрана архітектура з використанням ESP32, що забезпечує бездротову передачу даних. Дані з датчиків обробляються на мікроконтролері за допомогою алгоритмів, що забезпечують точність вимірювань і адаптацію під зміни умов навколишнього середовища. 
Всі налаштування клієнта були реалізовані через простий інтерфейс, що дозволяє змінювати параметри роботи системи без необхідності в програмуванні. Для забезпечення надійності передачі даних використовувався MQTT-брокер, що гарантує швидку та ефективну доставку інформації на сервер для подальшого зберігання та обробки.

 
Рисунок 1 – Схема IoT пристрою

2.	Фрагменти програмного коду:
	Бізнес логіки IoT клієнта  (математичної обробки повʼязаних із предметною областю даних); 
1  WiFi.begin(ssid, password);
2  while (WiFi.status() != WL_CONNECTED) {
3    delay(1000);
4    Serial.println("Підключення до WiFi...");
5  }
6  Serial.println("Підключено до WiFi");
	Налаштування IoT клієнта.
1  void loop() {
2    if (!client.connected()) {
3      reconnect();
4    }
5    client.loop();

6    // Вимірювання відстані від переднього датчика
7    int distance_front = measureDistance(pin_trig1, pin_echo1);

8    // Вимірювання відстані від заднього датчика
9    int distance_back = measureDistance(pin_trig2, pin_echo2);

10    // Створення JSON повідомлення
11    String message = "{\"distance_front\": " + String(distance_front) + 
12                     ", \"distance_back\": " + String(distance_back) + 
13                     ", \"licence_plate\": \"" + String(licence_plate) + "\"}";

14    // Публікація JSON повідомлення на MQTT топік
15    if (client.publish(topic, message.c_str())) {
16      Serial.println("Опубліковано: " + message);
17    } else {
18      Serial.println("Не вдалося опублікувати повідомлення");
19    }

20    // Очікування перед наступним вимірюванням
21    delay(5000); // 5 секунд
22  }

3.	Графічні ілюстрації (рисунки):
	UML діаграма прецедентів ІоТ клієнта.
 
Рисунок 2 – UML діаграма прецедентів ІоТ клієнта
	UML діаграма діяльності ІоТ клієнта.
 
Рисунок 3 – UML діаграма діяльності ІоТ клієнта

Висновки: У результаті виконаної роботи було розроблено ІоТ клієнта для збору та передачі даних з двох датчиків дистанції — спереду та ззаду. Створена архітектура системи, яка забезпечує вимірювання відстані з обох датчиків та їх подальшу передачу на сервер через MQTT. Було реалізовано бізнес-логіку для обробки отриманих даних та налаштувань пристроїв. Програмна реалізація продемонструвала стабільну роботу з датчиками та надійну передачу даних, що підтвердило ефективність розробленого рішення для використання в ІоТ системах з датчиками дистанції.
Посилання на відео: https://youtu.be/NIO4XA_T0Y8
