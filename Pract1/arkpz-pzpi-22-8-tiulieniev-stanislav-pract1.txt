МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»




ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»





Виконав:	Прийняв:
ст. гр. ПЗПІ-22-8	ст. викладач кафедри ПІ Тюлєнєв Станіслав Олександрович	Сокорчук Ігор Петрович





Харків 2024

МЕТА Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду.

ЗАВДАННЯ Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду».

ХІД РОБОТИ  Було обрано мову програмування F#. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій.

ВИСНОВКИ   Набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду.

Відео-презентація: https://youtu.be/UAcGfjWN5l4


ДОДАТОК А
Програмний код, використаний як приклад у презентації.

/f#/

// Поганий приклад (повторення коду) let calculateSquare x = x * x
let calculateCube x = x * x * x

// Гарний приклад (дотримання DRY)
let power x n = List.fold (fun acc _ -> acc * x) 1 [1..n]

let calculateSquare x = power x 2 let calculateCube x = power x 3

ДОДАТОК Б
Презентація на тему «Правила оформлення програмного коду».


ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ

ПЗПІ-22-8 Тюлєнєв Станіслав


F#
F# — це функціональна мова програмування, яка працює на платформі .NET і поєднує функціональний, об'єктно-орієнтований та імперативний підходи. Її функціональний стиль дозволяє створювати чистий, передбачуваний код, який легко підтримувати. F# часто використовується в задачах аналітики, фінансів та паралельних обчислень завдяки своїй продуктивності та потужній типізації.

РЕКОМЕНДАЦІЇ
Скорочуйте кількість мутабельних змінних
F# орієнтована на функціональний стиль програмування, де імутабельність (неможливість зміни даних) є основною характеристикою. Імутабельність дозволяє уникнути несподіваних побічних ефектів, підвищує безпеку паралельного виконання і робить код передбачуванішим. Код із багатьма змінними змінними важче підтримувати через необхідність відстежувати зміни стану в різних місцях. Це може призводити до помилок, які складно виявити, та збільшувати час на виправлення і тестування.

Структуруйте код у вигляді невеликих функцій
Великі, монолітні функції ускладнюють розуміння логіки програми, роблять тестування більш складним, а будь-які зміни можуть спричинити помилки в інших частинах коду. Це також ускладнює повторне використання функцій, оскільки вони можуть виконувати кілька завдань одразу. Модульність полегшує підтримку та розширення проєкту в майбутньому. Якщо код написаний як набір невеликих функцій, його простіше підтримувати, модифікувати й масштабувати.

Дотримуйтесь принципів DRY і KISS
Принципи DRY (Don’t Repeat Yourself) і KISS (Keep It Simple, Stupid) зменшують складність коду та запобігають дублюванню. F# надає можливість використовувати абстракції та модульний код, що дозволяє уникнути зайвих повторів і спрощує підтримку.
Повторення коду призводить до збільшення кількості місць, де можна припуститися помилок. Зміна в одному місці вимагає оновлення аналогічних частин коду в інших місцях, що підвищує ризик помилок і ускладнює внесення змін.

ПРИКЛАДИ
Поганий код:
Використовуються мутабельні змінні (mutable sum), що ускладнює відстеження стану програми і може призвести до помилок при багатопоточній обробці.

Гарний код:
Імутабельна змінна sum розраховується за допомогою функції List.sum, що робить код простішим, передбачуваним та безпечнішим для паралельних обчислень.

Поганий код:
Вся логіка обчислень зосереджена в одній великій функції calculateStats, що робить код складним для читання та тестування.

Гарний код:
Код розбитий на кілька простих функцій (sum, count, average), які виконують конкретні задачі, що підвищує модульність і полегшує тестування.

Поганий код:
Код містить повторювані функції для обчислення квадрата і куба чисел, що порушує принцип DRY (код повторюється).

Гарний код:
Використовується універсальна функція power для піднесення числа до будь-якого ступеня, що спрощує код і зменшує його дублювання.

ВИСНОВОК
Запропоновані рекомендації спрямовані на покращення якості коду в F# за рахунок підвищення читабельності, передбачуваності та простоти його підтримки. Важливість цих принципів полягає в тому, що вони допомагають уникнути поширених помилок, які можуть ускладнити роботу з кодом у майбутньому.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
Фаулер Мартін. "Refactoring: Improving the Design of Existing Code"
Refactoring.Guru
Мартін Роберт. "Clean Code: A Handbook of Agile Software Craftsmanship"
Хант Ендрю та Томас Девід. "The Pragmatic Programmer"
