МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»




ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»





Виконав:	Прийняв:
ст. гр. ПЗПІ-22-8	ст. викладач кафедри ПІ Тюлєнєв Станіслав Олександрович	Сокорчук Ігор Петрович












Харків 2024

МЕТА
      Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду.
ЗАВДАННЯ

     Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду».
ХІД РОБОТИ

     Було обрано мову програмування F#. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій.

ВИСНОВКИ
     Набуто навичок рефакторингу програмного коду, детально розглянуто основні правила оформлення коду.
Відео-презентація: https://youtu.be/UAcGfjWN5l4
ДОДАТОК А
Програмний код, використаний як приклад у презентації.

/f#/

// Поганий приклад (повторення коду) let calculateSquare x = x * x
let calculateCube x = x * x * x

// Гарний приклад (дотримання DRY)
let power x n = List.fold (fun acc _ -> acc * x) 1 [1..n]

let calculateSquare x = power x 2 let calculateCube x = power x 3

ДОДАТОК Б
Презентація на тему «Правила оформлення програмного коду».


ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ








ПЗПІ-22-8 Тюлєнєв Станіслав
1

F#
F# — це функціональна мова програмування, яка працює на платформі .NET і поєднує функціональний, об'єктно- орієнтований та імперативний підходи. Її функціональний стиль дозволяє створювати чистий, передбачуваний код, який легко підтримувати. F# часто використовується в задачах аналітики, фінансів та паралельних обчислень завдяки своїй продуктивності та потужній типізації.
2



РЕКОМЕНДАЦІЇ
Скорочуйте к?льк?сть мутабельних зм?нних
F# ор?єнтована на функц?ональний стиль програмування, де ?мутабельн?сть (неможлив?сть зм?ни даних) є основною характеристикою. Імутабельн?сть дозволяє уникнути неспод?ваних поб?чних ефект?в, п?двищує безпеку паралельного виконання ? робить код передбачуван?шим.Код ?з багатьма зм?нюваними зм?нними важче п?дтримувати через необх?дн?сть в?дстежувати зм?ни стану в р?зних м?сцях. Це може призводити до помилок, як? складно виявити, та зб?льшувати час на виправлення ? тестування.



РЕКОМЕНДАЦІЇ
Структуруйте код у вигляд? невеликих функц?й
Велик?, монол?тн? функц?ї ускладнюють розум?ння лог?ки програми, роблять тестування б?льш складним, а будь-як? зм?ни можуть спричинити помилки в ?нших частинах коду. Це також ускладнює повторне використання функц?й, оск?льки вони можуть виконувати к?лька завдань одразу.Модульн?сть полегшує п?дтримку та розширення проєкту в майбутньому. Якщо код написаний як наб?р невеликих функц?й, його прост?ше п?дтримувати, модиф?кувати й масштабувати.



РЕКОМЕНДАЦІЇ
Дотримуйтесь принцип?в
DRY ? KISS
Принципи DRY (Don’t Repeat Yourself) ? KISS (Keep It Simple, Stupid) зменшують складн?сть коду та запоб?гають дублюванню. F# надає можлив?сть використовувати абстракц?ї та модульний код, що дозволяє уникнути зайвих повтор?в ? спрощує п?дтримку.
Повторення коду призводить до зб?льшення
к?лькост? м?сць, де можна припуститися помилок. Зм?на в одному м?сц? вимагає оновлення аналог?чних частин коду в ?нших м?сцях, що п?двищує ризик помилок ? ускладнює внесення зм?н.

ПРИКЛАД
В поганому код? використовуються мутабельн? зм?нн? (mutable sum), що ускладнює в?дстеження стану програми ? може призвести до помилок при багатопоточн?й обробц?. П?сля зм?н ?мутабельна зм?нна sum розраховується за допомогою функц?ї List.sum, що робить код прост?шим, передбачуваним та безпечн?шим для паралельних обчислень.

4

ПРИКЛАД




Поганий код:
Вся лог?ка обчислень зосереджена в одн?й велик?й функц?ї calculateStats, що робить код складним для читання та тестування.
Гарний код:
Код розбитий на к?лька простих функц?й sum, count, average, як? виконують конкретн? задач?, що п?двищує модульн?сть ? полегшує тестування.

6

ПРИКЛАД



Поганий код:
Код м?стить повторюван? функц?ї для обчислення квадрата ? куба чисел, що порушує принцип DRY (код повторюється).
Гарний код:
Використовується ун?версальна функц?я power для п?днесення числа до будь-якого ступеня, що спрощує код ? зменшує його дублювання.
8




























ВИСНОВОК
Запропонован? рекомендац?ї спрямован? на покращення якост? коду в F# за рахунок п?двищення читабельност?, передбачуваност? та простоти його п?дтримки. Важлив?сть цих принцип?в полягає в тому, що вони допомагають уникнути поширених помилок, як? можуть ускладнити роботу з кодом у майбутньому.
9






























СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

1. Фаулер Март?н. "Refactoring: Improving the Design of Existing Code"
2. Refactoring.Guru
3. Март?н Роберт. "Clean Code: A Handbook of Agile Software Craftsmanship"
4. Хант Ендрю та Томас Дев?д. "The Pragmatic Programmer"
10
