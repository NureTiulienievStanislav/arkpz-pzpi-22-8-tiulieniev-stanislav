Міністерство освіти та науки України Харківський національний університет радіоелектроніки


Кафедра ПІ



Звіт
З лабораторної роботи 3
Тема роботи: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ»
з дисципліни «Аналіз та рефакторинг коду»






Виконав:	Перевірив:
ст. гр. ПЗПІ-22-8	ст. викладач Сокорчук І.П.
Тюлєнєв С.О.	 





Харків 2024

 
Мета роботи: На лабораторній роботі №3 потрібно розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.
Хід роботи: 
Під час виконання лабораторної роботи була створена серверна частина програмної системи для керування автопаркінгом. Реалізовано функції адміністрування, які охоплюють управління транспортними засобами та користувачами. Система підтримує розмежування ролей, що дозволяє адміністраторам переглядати списки користувачів і транспортних засобів, додавати та видаляти записи, а також оновлювати дані в базі. 
Для забезпечення безпеки реалізовано механізм автентифікації та авторизації з використанням JWT токенів. Додатково впроваджено middleware для перевірки прав доступу, що обмежує виконання адміністративних функцій лише для користувачів із відповідними правами.
Взаємодія з базою даних PostgreSQL здійснюється через запити для роботи з таблицями користувачів і транспортних засобів. Проведено тестування всіх функцій для перевірки їхньої працездатності та стабільності.
1.	Текстовий опис інженерних рішень
Серверна частина системи керування автопаркінгом побудована на основі Node.js з використанням фреймворку Express.js та бази даних PostgreSQL. Основні компоненти включають маршрути для обробки запитів, контролери для реалізації бізнес-логіки та моделі для взаємодії з базою даних. 
Маршрути забезпечують доступ до функцій керування транспортними засобами та користувачами, включаючи перегляд, додавання, оновлення та видалення записів. Контролери обробляють дані, виконуючи SQL-запити для роботи з таблицями, такими як "vehicles" та "users". 
Для безпеки реалізовано механізми автентифікації та авторизації за допомогою JWT токенів, а middleware перевіряють права доступу до адміністративних функцій. Інтеграція з MQTT-брокером дозволяє приймати дані з IoT-сенсорів для моніторингу дистанції та оновлення відповідної інформації в базі даних.

2.	Фрагменти програмного коду:
	Бізнес логіки (математичних методів обробки даних) серверної частини; 
Функція для додавання маршруту:
1 // functions.js
2 async function addRoute(start_location, end_location, distance) {
3   const query = 'INSERT INTO routes (start_location, end_location, distance) VALUES ($1, $2, $3) RETURNING route_id, start_location, end_location, distance';
4   const values = [start_location, end_location, distance];
 5   try {
6     const result = await client.query(query, values);
7     return result.rows[0];
8   } catch (err) {
9     throw new Error('Помилка при додаванні маршруту');
10   }
11 }
	Адміністрування серверної частини.
Функція для показу та видалення всіх користувачів та транспортів (admin only):
1 // functions.js
2 async function getAllUsers() {
3   const result = await client.query('SELECT * FROM users');
4   return result.rows;
5 }

6 async function deleteVehicle(vehicleId) {
7   const result = await client.query('DELETE FROM vehicles WHERE vehicle_id = $1 RETURNING *', [vehicleId]);
8   return result.rowCount > 0; 
9 }

10 async function deleteUser(userId) {
11   const result = await client.query('DELETE FROM users WHERE user_id = $1 RETURNING *', [userId]);
12   return result.rowCount > 0; 
13 }

14 async function getAllVehicles() {
15   const result = await client.query('SELECT * FROM vehicles');
16   return result.rows;
17 }

Висновки: У процесі розробки серверної частини системи автопаркінгу було реалізовано функції для управління транспортними засобами та користувачами, а також адміністрування доступу за допомогою ролей. Використання бази даних PostgreSQL дозволило ефективно зберігати та маніпулювати даними про автомобілі, користувачів та маршрути. Впровадження механізмів автентифікації та авторизації за допомогою JWT токенів забезпечило безпеку доступу до адміністративних функцій.

Посилання на відео: 


ДОДАТОК А
UML діаграма діяльності
 
Рисунок 1 – UML діаграма діяльності


ДОДАТОК Б
UML діаграма взаємодії
 
Рисунок 2 – UML діаграма взаємодії між клієнтом і сервером UML діаграма взаємодії між клієнтом і сервером

