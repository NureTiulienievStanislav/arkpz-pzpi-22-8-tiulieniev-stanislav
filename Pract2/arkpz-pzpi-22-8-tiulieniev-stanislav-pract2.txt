МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»



ЗВІТ

до практичного заняття №2 з дисципліни

«Аналіз та рефакторинг коду»

На тему: «Методи рефакторингу коду програмного забезпечення»





Виконав:	Прийняв:

ст. гр. ПЗПІ-22-8	ст. викладач кафедри ПІ Тюлєнєв Станіслав Олександрович	Сокорчук Ігор Петрович










Харків 2024

      Мета: Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
      Завдання: Студент повинен обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів.
       Хід роботи: Вся робота була виконана та показана на слайдах презентації. Вона містить всі обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку А.
       Висновок: Ми вивчили основи рефакторингу коду та його значення для покращення якості програмного забезпечення. Після застосування кожного
       методу ми побачили значне покращення структури та читабельності коду. Ці зміни також зробили код легшим для підтримки та розширення.

      Відео-презентація: https://youtu.be/FdWQH1LVDg4
ДОДАТОК А

Презентація на тему «Методи рефакторингу коду програмного забезпечення».








МЕТОДИ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ
П З П І - 2 2 - 8	Т ю л є н є в	С т а н і с л а в













Slide	1

Вступ

Рефакторинг — це процес зміни внутрішньої структури коду, спрямований на його оптимізацію та покращення організації без впливу на зовнішню поведінку програми. Основна мета рефакторингу полягає в тому, щоб зробити код більш зрозумілим, підтримуваним і легким для модифікації, що сприяє довготривалому збереженню якості проєкту та спрощує подальшу роботу з кодом.

Основні методи рефакторингу
Ми зосередимося на трьох методах рефакторингу з книги Мартіна Фаулера, які допомагають покращити якість коду без зміни його функціональності. Перший метод — Replace Temp with Query, який зменшує кількість тимчасових змінних, замінюючи їх на запити. Другий метод — Simplify Conditional Expression, спрямований на спрощення складної умовної логіки. Третій метод — Move Method, дозволяє перемістити метод до більш відповідного класу, що покращує структуру коду.

Slide

Replace Temp with Query
(Заміна тимчасових змінних на запити)




Цей метод усуває зайві тимчасові змінні, замінюючи їх на функції-запити, які безпосередньо повертають необхідні значення. Це зменшує кількість змінних у коді, робить його чистішим і легшим для розуміння, оскільки
розрахунки виконуються "на льоту", а не зберігаються у змінних..

Slide

Simplify Conditional Expression
(Спрощення умовних виразів)





Цей метод дозволяє спростити складну логіку умовних операторів, що часто буває важкочитабельною і помилковою. Спростивши ці вирази, код стає зрозумілішим і легшим для підтримки, що знижує ризик виникнення помилок.





Slide

Move Method
(Переміщення методу)




Slide

Приклад
Replace Temp with Query












До рефакторингу





Після рефакторингу





Slide




До рефакторингу






Після рефакторингу

Приклад
Simplify Conditional Expression
















Slide

Приклад
Move Method
До рефакторингу	Після рефакторингу

	


Slide





























ВИСНОВКИ
Рефакторинг є ключовим інструментом для підтримки високої якості коду. Він дозволяє покращити структуру, читабельність і підтримуваність проєкту, зменшуючи технічний борг та ймовірність помилок. Постійне застосування рефакторингу забезпечує кращу адаптацію коду до змін у вимогах, полегшує його модифікацію та розширення в майбутньому.
Slide


































СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ



Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" (2-е видання)

Slide
