МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»



ЗВІТ

до практичного заняття №2 з дисципліни

«Аналіз та рефакторинг коду»

На тему: «Методи рефакторингу коду програмного забезпечення»





Виконав:	Прийняв:

ст. гр. ПЗПІ-22-8	ст. викладач кафедри ПІ Тюлєнєв Станіслав Олександрович	Сокорчук Ігор Петрович



Харків 2024

Мета: Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

Завдання: Студент повинен обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів.

Хід роботи: Вся робота була виконана та показана на слайдах презентації. Вона містить всі обрані методи, приклади рефакторингу коду та висновки, які наведені у Додатку А.
Висновок: Ми вивчили основи рефакторингу коду та його значення для покращення якості програмного забезпечення. Після застосування кожного
методу ми побачили значне покращення структури та читабельності коду. Ці зміни також зробили код легшим для підтримки та розширення.

Відео-презентація: https://youtu.be/FdWQH1LVDg4


ДОДАТОК А

Презентація на тему «Методи рефакторингу коду програмного забезпечення».

МЕТОДИ РЕФАКТОРИНГУ КОДУ ПРОГРАМНОГО ЗАБЕЗПЕЧЕННЯ
ПЗПІ-22-8	Тюлєнєв	Станіслав


Вступ

Рефакторинг — це процес зміни внутрішньої структури коду, спрямований на його оптимізацію та покращення організації без впливу на зовнішню поведінку програми. Основна мета рефакторингу полягає в тому, щоб зробити код більш зрозумілим, підтримуваним і легким для модифікації, що сприяє довготривалому збереженню якості проєкту та спрощує подальшу роботу з кодом.

Основні методи рефакторингу
Ми зосередимося на трьох методах рефакторингу з книги Мартіна Фаулера, які допомагають покращити якість коду без зміни його функціональності. Перший метод — Replace Temp with Query, який зменшує кількість тимчасових змінних, замінюючи їх на запити. Другий метод — Simplify Conditional Expression, спрямований на спрощення складної умовної логіки. Третій метод — Move Method, дозволяє перемістити метод до більш відповідного класу, що покращує структуру коду.

Replace Temp with Query
(Заміна тимчасових змінних на запити)
Цей метод усуває зайві тимчасові змінні, замінюючи їх на функції-запити, які безпосередньо повертають необхідні значення. Це зменшує кількість змінних у коді, робить його чистішим і легшим для розуміння, оскільки
розрахунки виконуються "на льоту", а не зберігаються у змінних..


Simplify Conditional Expression
(Спрощення умовних виразів)
Цей метод дозволяє спростити складну логіку умовних операторів, що часто буває важкочитабельною і помилковою. Спростивши ці вирази, код стає зрозумілішим і легшим для підтримки, що знижує ризик виникнення помилок.


Move Method
(Переміщення методу)
Цей метод переміщує методи до класів, де вони краще відповідають своїй функціональності. Це покращує структурованість коду і полегшує його розуміння, дозволяючи методам бути ближче до даних і поведінки, з якими вони повинні працювати.

Приклад
Replace Temp with Query

До рефакторингу

1 public double CalculateDiscount(double price, double discountRate) {
2    double discount = price * discountRate;
3    double finalPrice = price - discount;
4    return finalPrice;
5 }

6 double totalPrice = CalculateDiscount(100, 0.2);

Після рефакторингу

1 public double CalculateDiscount(double price, double discountRate) {
2    return price - (price * discountRate);
3 }

4 double totalPrice = CalculateDiscount(100, 0.2);


Приклад
Simplify Conditional Expression

До рефакторингу

1 if (user.IsPremiumMember() && user.Subscription != null && !user.Subscription.IsExpired()) {
2    SendPremiumContent(user);
3 } else {
4    SendRegularContent(user);
5 }

Після рефакторингу

1 if (user.CanAccessPremiumContent()) {
2    SendPremiumContent(user);
3 } else {
4    SendRegularContent(user);
5 }


Приклад
Move Method

До рефакторингу	

1 class Order {
2   public double GetTotalPrice() {
3        return product.Price * quantity;
4    }
5 }
6
7 class Product {
8    public double Price { get; set; }
9 }


Після рефакторингу

1 class Order {
2    public double GetTotalPrice() {
3        return product.GetTotalPrice(quantity);
4    }
5 }
6
7 class Product {
8    public double Price { get; set; }
9
10    public double GetTotalPrice(int quantity) {
11        return Price * quantity;
12    }
13 }


ВИСНОВКИ
Рефакторинг є ключовим інструментом для підтримки високої якості коду. Він дозволяє покращити структуру, читабельність і підтримуваність проєкту, зменшуючи технічний борг та ймовірність помилок. Постійне застосування рефакторингу забезпечує кращу адаптацію коду до змін у вимогах, полегшує його модифікацію та розширення в майбутньому.
Slide

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" 
Фаулер Мартін. "Refactoring: Improving the Design of Existing Code" (2-е видання)

